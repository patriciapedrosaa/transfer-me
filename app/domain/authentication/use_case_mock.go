// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package authentication

import (
	"context"
	"github.com/patriciapedrosaa/transfer-me/app/domain/entities"
	"sync"
)

// Ensure, that UseCaseMock does implement UseCase.
// If this is not the case, regenerate this file with moq.
var _ UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateTokenFunc: func(ctx context.Context, login LoginInputs) (string, error) {
// 				panic("mock out the CreateToken method")
// 			},
// 			ValidatesTokenFunc: func(ctx context.Context, tokenString string) (entities.Token, error) {
// 				panic("mock out the ValidatesToken method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func(ctx context.Context, login LoginInputs) (string, error)

	// ValidatesTokenFunc mocks the ValidatesToken method.
	ValidatesTokenFunc func(ctx context.Context, tokenString string) (entities.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login LoginInputs
		}
		// ValidatesToken holds details about calls to the ValidatesToken method.
		ValidatesToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenString is the tokenString argument value.
			TokenString string
		}
	}
	lockCreateToken    sync.RWMutex
	lockValidatesToken sync.RWMutex
}

// CreateToken calls CreateTokenFunc.
func (mock *UseCaseMock) CreateToken(ctx context.Context, login LoginInputs) (string, error) {
	callInfo := struct {
		Ctx   context.Context
		Login LoginInputs
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	mock.lockCreateToken.Unlock()
	if mock.CreateTokenFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.CreateTokenFunc(ctx, login)
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//     len(mockedUseCase.CreateTokenCalls())
func (mock *UseCaseMock) CreateTokenCalls() []struct {
	Ctx   context.Context
	Login LoginInputs
} {
	var calls []struct {
		Ctx   context.Context
		Login LoginInputs
	}
	mock.lockCreateToken.RLock()
	calls = mock.calls.CreateToken
	mock.lockCreateToken.RUnlock()
	return calls
}

// ValidatesToken calls ValidatesTokenFunc.
func (mock *UseCaseMock) ValidatesToken(ctx context.Context, tokenString string) (entities.Token, error) {
	callInfo := struct {
		Ctx         context.Context
		TokenString string
	}{
		Ctx:         ctx,
		TokenString: tokenString,
	}
	mock.lockValidatesToken.Lock()
	mock.calls.ValidatesToken = append(mock.calls.ValidatesToken, callInfo)
	mock.lockValidatesToken.Unlock()
	if mock.ValidatesTokenFunc == nil {
		var (
			tokenOut entities.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.ValidatesTokenFunc(ctx, tokenString)
}

// ValidatesTokenCalls gets all the calls that were made to ValidatesToken.
// Check the length with:
//     len(mockedUseCase.ValidatesTokenCalls())
func (mock *UseCaseMock) ValidatesTokenCalls() []struct {
	Ctx         context.Context
	TokenString string
} {
	var calls []struct {
		Ctx         context.Context
		TokenString string
	}
	mock.lockValidatesToken.RLock()
	calls = mock.calls.ValidatesToken
	mock.lockValidatesToken.RUnlock()
	return calls
}
