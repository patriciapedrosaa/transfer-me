// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfer

import (
	"github.com/patriciapedrosaa/transfer-me/app/domain/entities"
	"sync"
)

// Ensure, that UseCaseMock does implement UseCase.
// If this is not the case, regenerate this file with moq.
var _ UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateFunc: func(input CreateTransferInput) (entities.Transfer, error) {
// 				panic("mock out the Create method")
// 			},
// 			GetTransfersByAccountIDFunc: func(accountID string) ([]entities.Transfer, error) {
// 				panic("mock out the GetTransfersByAccountID method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(input CreateTransferInput) (entities.Transfer, error)

	// GetTransfersByAccountIDFunc mocks the GetTransfersByAccountID method.
	GetTransfersByAccountIDFunc func(accountID string) ([]entities.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Input is the input argument value.
			Input CreateTransferInput
		}
		// GetTransfersByAccountID holds details about calls to the GetTransfersByAccountID method.
		GetTransfersByAccountID []struct {
			// AccountID is the accountID argument value.
			AccountID string
		}
	}
	lockCreate                  sync.RWMutex
	lockGetTransfersByAccountID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UseCaseMock) Create(input CreateTransferInput) (entities.Transfer, error) {
	callInfo := struct {
		Input CreateTransferInput
	}{
		Input: input,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			transferOut entities.Transfer
			errOut      error
		)
		return transferOut, errOut
	}
	return mock.CreateFunc(input)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedUseCase.CreateCalls())
func (mock *UseCaseMock) CreateCalls() []struct {
	Input CreateTransferInput
} {
	var calls []struct {
		Input CreateTransferInput
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetTransfersByAccountID calls GetTransfersByAccountIDFunc.
func (mock *UseCaseMock) GetTransfersByAccountID(accountID string) ([]entities.Transfer, error) {
	callInfo := struct {
		AccountID string
	}{
		AccountID: accountID,
	}
	mock.lockGetTransfersByAccountID.Lock()
	mock.calls.GetTransfersByAccountID = append(mock.calls.GetTransfersByAccountID, callInfo)
	mock.lockGetTransfersByAccountID.Unlock()
	if mock.GetTransfersByAccountIDFunc == nil {
		var (
			transfersOut []entities.Transfer
			errOut       error
		)
		return transfersOut, errOut
	}
	return mock.GetTransfersByAccountIDFunc(accountID)
}

// GetTransfersByAccountIDCalls gets all the calls that were made to GetTransfersByAccountID.
// Check the length with:
//     len(mockedUseCase.GetTransfersByAccountIDCalls())
func (mock *UseCaseMock) GetTransfersByAccountIDCalls() []struct {
	AccountID string
} {
	var calls []struct {
		AccountID string
	}
	mock.lockGetTransfersByAccountID.RLock()
	calls = mock.calls.GetTransfersByAccountID
	mock.lockGetTransfersByAccountID.RUnlock()
	return calls
}
